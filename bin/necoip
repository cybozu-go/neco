#!/bin/bash -e
set -o pipefail

if [ $# -eq 0 ] || [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
        echo '* necoip <IPADDR>'
        echo '# necoip shows the detail of an IP, how it is used in the cluster.'
        echo '# to see implementation: cat $(which necoip)'
        exit
fi

if ! echo $1 | grep -E '^([0-9]{1,3}[.]){3}[0-9]{1,3}$' > /dev/null; then
        echo "Input is not a valid IP"
        exit 1
fi

NODE_JSON=$(kubectl get node $1 -o json 2>/dev/null || true)
if [ ! -z "${NODE_JSON}" ]; then
        echo "$1 is a Node"
        exit
fi

SVC_JSON=$(kubectl get svc -Ao json)
SVC_CLUSTER_IP=$(echo $SVC_JSON | jq ".items[] | select(.spec.clusterIP == \"$1\")")
if [ ! -z "${SVC_CLUSTER_IP}" ]; then
        SVC_NAMESPACE=$(echo ${SVC_CLUSTER_IP} | jq -r '.metadata.namespace')
        SVC_NAME=$(echo ${SVC_CLUSTER_IP} | jq -r '.metadata.name')
        echo "$1 is a Service (ClusterIP): ${SVC_NAMESPACE}/${SVC_NAME}"
        exit
fi

SVC_LOAD_BALANCER=$(echo $SVC_JSON | jq ".items[] | select(.status.loadBalancer.ingress[0].ip == \"$1\")")
if [ ! -z "${SVC_LOAD_BALANCER}" ]; then
        SVC_NAMESPACE=$(echo ${SVC_LOAD_BALANCER} | jq -r '.metadata.namespace')
        SVC_NAME=$(echo ${SVC_LOAD_BALANCER} | jq -r '.metadata.name')
        echo "$1 is a Service (LoadBalancer): ${SVC_NAMESPACE}/${SVC_NAME}"
        exit
fi

POD_JSON=$(kubectl get po -Ao json | jq ".items[] | select(.status.podIP == \"$1\")")
if [ ! -z "${POD_JSON}" ]; then
        POD_NAMESPACE=$(echo ${POD_JSON} | jq -r '.metadata.namespace')
        POD_NAME=$(echo ${POD_JSON} | jq -r '.metadata.name')
        echo "$1 is a Pod: ${POD_NAMESPACE}/${POD_NAME}"
        exit
fi

for p in $(kubectl get addresspools -o json | jq -c '.items[]'); do
        POOL_NAME=$(echo $p | jq -r '.metadata.name')
        for s in $(echo $p | jq -r '.spec.subnets[].ipv4'); do
                TEST=$(python3 -c "from ipaddress import *; print(ip_address(\"$1\") in ip_network(\"$s\"))")
                if [ "${TEST}" = "True" ]; then
                        echo "$1 is an AddressPool IP: ${POOL_NAME}"
                        exit
                fi
        done
done

if which sabactl >/dev/null; then
        IPV4_JSON=$(sabactl machines get --ipv4 $1 2>/dev/null | jq '.[0]' || true)
        BMC_JSON=$(sabactl machines get | jq ".[] | select(.spec.bmc.ipv4==\"$1\")")
        if [ ! -z "${IPV4_JSON}" ]; then
                MACHINE_JSON=${IPV4_JSON}
                IPV4_INDEX=$(echo ${IPV4_JSON} | jq ".spec.ipv4 | index(\"$1\")")
                INPUT_ROLE=$(echo '["VIP", "1st NIC", "2nd NIC"]' | jq -r ".[${IPV4_INDEX}]")
        elif [ ! -z "${BMC_JSON}" ]; then
                MACHINE_JSON=${BMC_JSON}
                INPUT_ROLE="BMC"
        fi
        if [ ! -z "${MACHINE_JSON}" ]; then
                MACHINE_ROLE=$(echo ${MACHINE_JSON} | jq -r '.spec.role')
                MACHINE_RACK=$(echo ${MACHINE_JSON} | jq -r '.spec.rack')
                MACHINE_IIR=$(echo ${MACHINE_JSON} | jq -r '.spec["index-in-rack"]')
                if [ "${MACHINE_ROLE}" = "boot" ]; then
                        MACHINE_NAME="boot-${MACHINE_RACK}"
                else
                        MACHINE_NAME="rack${MACHINE_RACK}-${MACHINE_ROLE}${MACHINE_IIR}"
                fi
                echo "$1 is ${MACHINE_NAME} (${INPUT_ROLE})"
                exit
        fi
fi

echo "$1 is unknown (maybe a bug in this script)"
exit 1
