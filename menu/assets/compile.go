// +build ignore

package main

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"text/template"
)

func errExit(err error) {
	fmt.Fprintln(os.Stderr, "Error:", err)
	os.Exit(2)
}

func main() {
	files := make(map[string]string)
	err := filepath.Walk("assets", func(path string, info os.FileInfo, err error) error {
		if err != nil {
			return err
		}
		if info.IsDir() {
			return nil
		}
		data, err := ioutil.ReadFile(path)
		if err != nil {
			return err
		}
		name := filepath.Base(path)
		switch name {
		case "compile", "compile.go":
		default:
			files[name] = string(data)
		}
		return nil
	})
	if err != nil {
		errExit(err)
	}

	out, err := os.OpenFile("assets.go", os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0644)
	if err != nil {
		errExit(err)
	}
	defer out.Close()

	err = tmpl.Execute(out, files)
	if err != nil {
		errExit(err)
	}
	err = out.Sync()
	if err != nil {
		errExit(err)
	}
}

var tmpl = template.Must(template.New("assets.go").Parse(`// Code generated by compile.go. DO NOT EDIT.
//go:generate go run ./assets/compile.go

package menu

import (
	"errors"
	"text/template"
)

var Assets = map[string]string{
{{- range $name, $data := . }}
	{{ printf "%q" $name }}: {{ printf "%q" $data }},
{{- end }}
}

func GetAssetTemplate(name string) (*template.Template, error) {
	data, ok := Assets[name]
	if !ok {
		return nil, errors.New("no such asset: " + name)
	}
	return template.New(name).Parse(data)
}
`))
