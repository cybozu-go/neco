log stderr all;
protocol device {
    scan time 60;
}
protocol bfd {
    interface "*" {
       min rx interval 400 ms;
       min tx interval 400 ms;
    };
}
protocol kernel {
    merge paths;
    ipv4 {
        export all;
    };
}
template bgp bgptor {
    local as {{.ASNSpine}};
    bfd;

    ipv4 {
        import all;
        export all;
        next hop self;
    };
}
{{$spineIdx := .SpineIdx -}}
{{range $rack := .Racks -}}
protocol bgp '{{$rack.Name}}-tor1' from bgptor {
    neighbor {{(index $rack.ToR1.SpineAddresses $spineIdx)}} as {{$rack.ASN}};
}
protocol bgp '{{$rack.Name}}-tor2' from bgptor {
    neighbor {{(index $rack.ToR2.SpineAddresses $spineIdx)}} as {{$rack.ASN}};
}
{{end -}}
ipv4 table outertab;
protocol static myroutes {
    ipv4 {
        table outertab;
    };
    # LoadBalancer
    route {{.LoadBalancer}} via {{.CoreSpineAddress}};
    # Bastion
    route {{.Bastion}} via {{.CoreSpineAddress}};
    # Ingress
    route {{.Ingress}} via {{.CoreSpineAddress}};
    # Global
    route {{.Global}} via {{.CoreSpineAddress}};
    # Pod
    route {{.Pod}} via {{.CoreSpineAddress}};
}

protocol bgp 'core' {
    local as {{.ASNSpine}};
    neighbor {{.CoreSpineAddress}} as {{.ASNCore}};
    bfd;

    ipv4 {
        table outertab;
        import all;
        export all;
        next hop self;
    };
}

protocol pipe outerroutes {
    table master4;
    peer table outertab;
    import filter {
        if proto = "myroutes" then reject;
        accept;
    };
    export none;
}
