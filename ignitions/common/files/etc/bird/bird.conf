log stderr all;
protocol device {
    scan time 60;
}
protocol direct singles {
    ipv4;
    interface "node0";
}
protocol bfd {
    interface "*" {
       min rx interval 300 ms;
       min tx interval 300 ms;
    };
}
protocol kernel {
    merge paths;
    ipv4 {
        export filter {
            if source = RTS_DEVICE then reject;
            if proto = "coil" then reject;
            if (64698,64699) ~ bgp_community then reject;
            accept;
        };
    };
}
ipv4 table coiltab;
protocol kernel 'coil' {
    kernel table 119;  # coil exports
    learn;
    scan time 1;
    ipv4 {
        table coiltab;
        import all;
        export none;
    };
}
protocol pipe {
    table master4;
    peer table coiltab;
    import all;
    export none;
}
ipv4 table dummytab;
protocol static dummystatic {
    ipv4 { table dummytab; };
    route 0.0.0.0/0 via "lo";
}
template bgp tor {
    local as {{ add 64600 .Spec.Rack }};
    direct;
    bfd;
    ipv4 {
        # Accept routes regardless of its NEXT_HOP.
        igp table dummytab;
        gateway recursive;
        next hop self;
        import filter {
            # If this route came from iBGP peers,
            if bgp_next_hop.mask({{ (index .Info.Network.IPv4 1).MaskBits }}) = from.mask({{ (index .Info.Network.IPv4 1).MaskBits }}) then {
                # use the NEXT_HOP as the gateway address.
                gw = bgp_next_hop;
                accept;
            }
            # Otherwise, use the router address as the gateway address.
            # This is virtually equal to "next hop self" on receiver side.
            gw = from;
            accept;
        };
        export all;
    };
}
protocol bgp tor1 from tor {
    neighbor {{ (index .Info.Network.IPv4 1).Gateway }} as {{ add 64600 .Spec.Rack }};
}
protocol bgp tor2 from tor {
    neighbor {{ (index .Info.Network.IPv4 2).Gateway }} as {{ add 64600 .Spec.Rack }};
}
protocol bgp metallb {
    local as 64699;
    neighbor 127.0.0.1 as 64698;

    multihop;
    passive;
    ipv4 {
        import filter {
            bgp_community.add((64698,64699));
            accept;
        };
        export none;
    };
}
