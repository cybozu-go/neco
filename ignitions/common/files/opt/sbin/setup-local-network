#!/bin/sh -e

# This "fetch" must be separated from "run" because "fetch" uses the DHCP-configured network.
# "setup-local-network" reconfigures network, and "run" starts bird to manage the reconfigured network.
img={{ MyURL }}/api/v1/assets/{{ Metadata "bird.img" }}
filename=/tmp/{{ Metadata "bird.img" }}
for i in $(seq 20); do
    if [ $i -gt 20 ]; then
        echo "'curl -sfSL -o bird.img' failed. Giveup."
        exit 1
    fi
    if curl -sfSL -o "$filename" "$img"; then
        /usr/bin/docker load -i /tmp/{{ Metadata "bird.img" }}
        break
    fi
    rm -f "$filename"
    sleep 5
done

MTU=1500
if systemd-detect-virt -q; then
    MTU=1460
fi

cat >/etc/systemd/network/01-eth0.network <<EOF
[Match]
Name=eth0 eno1 eno12399

[Network]
LLDP=true
EmitLLDP=nearest-bridge

[Address]
Address={{ index .Spec.IPv4 1 }}/{{ (index .Info.Network.IPv4 1).MaskBits }}
Scope=link

[Link]
MTUBytes=${MTU}
EOF

cat >/etc/systemd/network/01-eth1.network <<EOF
[Match]
Name=eth1 eno2 eno12409

[Network]
LLDP=true
EmitLLDP=nearest-bridge

[Address]
Address={{ index .Spec.IPv4 2 }}/{{ (index .Info.Network.IPv4 2).MaskBits }}
Scope=link

[Link]
MTUBytes=${MTU}
EOF

cat >/etc/systemd/network/10-node0.netdev <<EOF
[NetDev]
Name=node0
Kind=dummy
EOF

cat >/etc/systemd/network/10-node0.network <<EOF
[Match]
Name=node0

[Network]
Address={{ index .Spec.IPv4 0 }}/32
EOF

systemctl restart systemd-networkd.service
