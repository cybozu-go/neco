#!/bin/sh -eu

VG=vg1
LVLIST="k8s-containerd docker kubelet systemd coredump"

# these values are for qemu (dctest env). see below for real machines.
CONTAINERD_SIZE=20g
DOCKER_SIZE=10g
KUBELET_SIZE=40g
SYSTEMD_SIZE=1g
COREDUMP_SIZE=1g

lvsize() {
    case $1 in
    k8s-containerd)
        echo $CONTAINERD_SIZE
        ;;
    docker)
        echo $DOCKER_SIZE
        ;;
    kubelet)
        echo $KUBELET_SIZE
        ;;
    systemd)
        echo $SYSTEMD_SIZE
        ;;
    coredump)
        echo $COREDUMP_SIZE
        ;;
    esac
}

always_mkfs() {
    case $1 in
    kubelet)
        return 0
        ;;
    esac
    return 1
}

prepare_lv() {
    # enable COW volume auto extension
    lvmconfig --config activation/snapshot_autoextend_threshold=70 \
      --withsummary --withcomments --withspaces --withversions -f /etc/lvm/lvm.conf

    # When lvmetad is used, PVs are not scaned by vgchange.
    # We need to scan PVs manually and send infomation to lvmetad. 
    pvscan --cache -a ay

    vgchange -a ay
    sleep 1

    if ! vgs $VG >/dev/null 2>&1; then
        vgcreate $VG $PVS -y
        sync
    fi

    lvchange $VG -a ay
    sleep 1

    for lv in $LVLIST; do
        if ! lvs $VG/$lv >/dev/null 2>&1; then
            lvcreate -y -n $lv -L $(lvsize $lv) $VG
        fi
        sync
        sleep 1
    done
}

find_boss() {
    sdlist=$(cd /sys/block; ls -d sd*)
    for sd in $sdlist; do
        if grep -q DELLBOSS /sys/block/$sd/device/model; then
            echo /dev/mapper/crypt-$sd
        fi
    done
}

if ls /dev/mapper/crypt-vd* >/dev/null 2>&1; then
    # for qemu
    PVS=$(ls /dev/mapper/crypt-vd[abcd])
    prepare_lv
elif ls /dev/mapper/crypt-nvme* >/dev/null 2>&1; then
    # for compute node
    PVS=$(ls /dev/mapper/crypt-nvme*)
    CONTAINERD_SIZE=1t
    DOCKER_SIZE=50g
    KUBELET_SIZE=100g
    COREDUMP_SIZE=50g
    prepare_lv
else
    # for storage node
    PVS=$(find_boss)
    CONTAINERD_SIZE=50g
    DOCKER_SIZE=50g
    KUBELET_SIZE=10g
    COREDUMP_SIZE=20g
    prepare_lv
fi

for label in $LVLIST; do
    DEVICE=/dev/$VG/$label
    while true; do
        if [ -e $DEVICE ]; then
            break
        fi
        echo "waiting for $DEVICE to appear..."
        sleep 1
    done

    if always_mkfs $label || [ $label != "$(lsblk -n -o LABEL $DEVICE)" ]; then
        mkfs.ext4 -L $label $DEVICE
    fi
done

sync
