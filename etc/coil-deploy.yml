kind: ConfigMap
apiVersion: v1
metadata:
  name: coil-config
  namespace: kube-system
data:
  # The CNI network configuration to install on each node.
  cni_netconf: |-
    {
        "cniVersion": "0.3.1",
        "name": "coilium",
        "plugins": [
          {
            "type": "coil",
            "coild": "http://127.0.0.1:9383"
          },
          {
            "type": "cilium-cni"
          },
          {
            "type": "tuning",
            "mtu": 1400
          },
          {
            "type": "portmap",
            "snat": true,
            "capabilities": {"portMappings": true}
          }
        ]
    }

  # CNI network configuration may be given by a file.
  cni_netconf_file: "/etc/cni/net.d/04-coil.conflist"

  # Installation directory for CNI configuration file.
  # Default: "/etc/cni/net.d"
  #cni_etc_dir: "/etc/cni/net.d"

  # Installation directory for CNI plugin.
  # Default: "/opt/cni/bin"
  #cni_bin_dir: "/opt/cni/bin"

  # Path to `coil`
  # Default: "/coil`
  #coil_path: "/coil"

---

# This manifest installs the coild as well as CNI plugins and
# network config on each node.
kind: DaemonSet
apiVersion: apps/v1
metadata:
  name: coil-node
  namespace: kube-system
  labels:
    k8s-app: coil-node
spec:
  selector:
    matchLabels:
      k8s-app: coil-node
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
  template:
    metadata:
      labels:
        k8s-app: coil-node
    spec:
      priorityClassName: system-node-critical
      nodeSelector:
        beta.kubernetes.io/os: linux
      hostNetwork: true
      tolerations:
        # Make sure coil gets scheduled on all nodes.
        - effect: NoSchedule
          operator: Exists
        # Mark the pod as a critical add-on for rescheduling.
        - key: CriticalAddonsOnly
          operator: Exists
        - effect: NoExecute
          operator: Exists
      serviceAccountName: coil-node
      terminationGracePeriodSeconds: 0
      containers:
        - name: coild
          image: "{{ .coil }}"
          command:
            - /coild
            - "--etcd-endpoints=@cke-etcd"
            - "--etcd-tls-ca=/coil-secrets/etcd-ca.crt"
            - "--etcd-tls-cert=/coil-secrets/etcd-coil.crt"
            - "--etcd-tls-key=/coil-secrets/etcd-coil.key"
          env:
            - name: COIL_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          securityContext:
            privileged: true
          resources:
            requests:
              cpu: 250m
          livenessProbe:
            httpGet:
              path: /status
              port: 9383
              host: localhost
            periodSeconds: 10
            initialDelaySeconds: 10
            failureThreshold: 6
          volumeMounts:
            - mountPath: /coil-secrets
              name: etcd-certs
        # This container installs the coil CNI plugin and configuration file.
      initContainers:
        - name: coil-installer
          image: "{{ .coil }}"
          command: ["/coil-installer"]
          env:
            - name: CNI_NETCONF
              valueFrom:
                configMapKeyRef:
                  name: coil-config
                  key: cni_netconf
            - name: COIL_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: COIL_BOOT_TAINT
              value: coil.cybozu.com/bootstrap
          securityContext:
            privileged: true
          volumeMounts:
            - mountPath: /host/opt/cni/bin
              name: cni-bin-dir
            - mountPath: /host/etc/cni/net.d
              name: cni-net-dir
      volumes:
        # Used by installer.
        - name: cni-bin-dir
          hostPath:
            path: /opt/cni/bin
        - name: cni-net-dir
          hostPath:
            path: /etc/cni/net.d
        # Used by coild
        - name: etcd-certs
          secret:
            secretName: coil-etcd-secrets
            defaultMode: 0400
---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: coil-node
  namespace: kube-system

---

# This manifest deploys coil-controller.
apiVersion: apps/v1
kind: Deployment
metadata:
  name: coil-controllers
  namespace: kube-system
  labels:
    k8s-app: coil-controllers
spec:
  # coil-controller can only have a single active instance.
  replicas: 1
  selector:
    matchLabels:
      k8s-app: coil-controllers
  strategy:
    type: Recreate
  template:
    metadata:
      name: coil-controllers
      namespace: kube-system
      labels:
        k8s-app: coil-controllers
    spec:
      priorityClassName: system-cluster-critical
      nodeSelector:
        beta.kubernetes.io/os: linux
      hostNetwork: true
      tolerations:
        # Mark the pod as a critical add-on for rescheduling.
        - key: CriticalAddonsOnly
          operator: Exists
        - key: node-role.kubernetes.io/master
          effect: NoSchedule
      serviceAccountName: coil-controller
      containers:
        - name: controller
          image: "{{ .coil }}"
          command:
            - /coil-controller
            - "--etcd-endpoints=@cke-etcd"
            - "--etcd-tls-ca=/coil-secrets/etcd-ca.crt"
            - "--etcd-tls-cert=/coil-secrets/etcd-coil.crt"
            - "--etcd-tls-key=/coil-secrets/etcd-coil.key"
          # for "kubectl exec POD coilctl"
          env:
            - name: COILCTL_ENDPOINTS
              value: "@cke-etcd"
            - name: COILCTL_TLS_CA_FILE
              value: "/coil-secrets/etcd-ca.crt"
            - name: COILCTL_TLS_CERT_FILE
              value: "/coil-secrets/etcd-coil.crt"
            - name: COILCTL_TLS_KEY_FILE
              value: "/coil-secrets/etcd-coil.key"
          volumeMounts:
            - mountPath: /coil-secrets
              name: etcd-certs
      volumes:
        - name: etcd-certs
          secret:
            secretName: coil-etcd-secrets
            defaultMode: 0400

---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: coil-controller
  namespace: kube-system
