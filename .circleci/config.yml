version: 2.1
commands:
  run-dctest-bootstrap:
    description: "run datacenter test (bootstrap)"
    parameters:
      tag:
        type: string
        default: ""
      datacenter:
        type: string
        default: ""
    steps:
      - run:
          name: Store Service Account
          command: |
            if [ -f .skip ]; then exit 0; fi
            echo $GCLOUD_SERVICE_ACCOUNT > account.json
            gcloud auth activate-service-account --key-file=account.json
      - run:
          name: Store secrets
          command: |
            if [ -f .skip ]; then exit 0; fi
            echo "$QUAY_PASSWORD" > secrets
      - run:
          name: Store github-token
          command: |
            if [ -f .skip ]; then exit 0; fi
            echo "$NECO_GITHUB_TOKEN" > github-token
      - run:
          name: Watch console on boot-0
          command: |
            if [ -f .skip ]; then exit 0; fi
            ./bin/watch_boot0
          background: true
      - run:
          name: Watch neco-updater logs
          command: |
            if [ -f .skip ]; then exit 0; fi
            ./bin/watch_service neco-updater
          background: true
      - run:
          name: Watch neco-worker logs
          command: |
            if [ -f .skip ]; then exit 0; fi
            ./bin/watch_service neco-worker
          background: true
      - run:
          name: Watch all pod logs
          command: |
            if [ -f .skip ]; then exit 0; fi
            ./bin/watch_podlogs
          background: true
      - run:
          name: Run dctest bootstrap
          command: |
            if [ -f .skip ]; then exit 0; fi
            ./bin/run-dctest.sh bootstrap "<<parameters.tag>>" "<<parameters.datacenter>>"
          no_output_timeout: 20m

jobs:
  build:
    docker:
      - image: quay.io/cybozu/golang:1.13-bionic
      - image: quay.io/coreos/etcd:v3.3
    working_directory: /work
    resource_class: xlarge
    steps:
      - checkout
      - run: time make SUDO="" setup
      - run: time make test
      - run: time make deb SUDO="" FAKEROOT=
      - run:
          command: |
            if [ "${CIRCLE_BRANCH}" != "master" ]; then
              go install -mod=vendor ./pkg/generate-artifacts/
              generate-artifacts > /tmp/artifacts.go
              diff -u artifacts.go /tmp/artifacts.go
            fi

  build_release:
    docker:
      - image: quay.io/cybozu/golang:1.13-bionic
      - image: quay.io/coreos/etcd:v3.3
    working_directory: /work
    resource_class: xlarge
    steps:
      - checkout
      - run: time make SUDO="" setup
      - run: time make test
      - run:
          name: Build deb package
          command: |
            VERSION=$(echo $CIRCLE_TAG | sed 's/^release-//')
            time make deb SUDO="" DEBBUILD_FLAGS="" VERSION="$VERSION" TAGS=release FAKEROOT=
      - persist_to_workspace:
          root: .
          paths:
            - "*.deb"

  deploy_github:
    docker:
      - image: quay.io/cybozu/golang:1.13-bionic
    steps:
      - attach_workspace:
          at: ./artifacts
      - run: ghr -prerelease -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} ${CIRCLE_TAG} ./artifacts/

  dctest-functions:
    docker:
      - image: google/cloud-sdk
    resource_class: xlarge
    steps:
      - checkout
      - run-dctest-bootstrap
      - run:
          name: Run dctest functions
          command: ./bin/run-dctest-suite.sh functions
          no_output_timeout: 20m
      - run:
          name: Delete instance
          command: |
            . ./bin/env
            $GCLOUD compute instances delete ${INSTANCE_NAME} --zone ${ZONE}
      - run:
          name: Clean up SSH keys generated by `gcloud compute`
          command: |
            gcloud --quiet --project neco-test compute project-info remove-metadata --keys=ssh-keys

  dctest-upgrade:
    docker:
      - image: google/cloud-sdk
    steps:
      - checkout
      - run-dctest-bootstrap:
          tag: release
          datacenter: staging
      - run:
          name: Run dctest upgrade
          command: ./bin/run-dctest-suite.sh upgrade
          no_output_timeout: 20m
      - run:
          name: Delete instance
          command: |
            . ./bin/env
            $GCLOUD compute instances delete ${INSTANCE_NAME} --zone ${ZONE}

  generate-artifacts:
    docker:
      - image: quay.io/cybozu/golang:1.13-bionic
    steps:
      - checkout
      - run: go install -mod=vendor ./pkg/generate-artifacts/
      - run: generate-artifacts --release > artifacts_release.go
      - persist_to_workspace:
          root: .
          paths:
            - "artifacts_release.go"

  dctest-functions-release:
    docker:
      - image: google/cloud-sdk
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Configure GIT
          command: |
            git config --global user.email "neco@cybozu.com"
            git config --global user.name "cybozu-neco"
      # Check difference between [`release` branch] and [`master` branch + `artifacts_release.go`]
      - run: git checkout release
      - run: git merge --no-commit origin/master
      - run: cp /tmp/workspace/artifacts_release.go .
      - run:
          name: Check diff
          command: |
            diffs=$(git status -s)
            if [ "$diffs" = "" ]; then touch .skip; exit 0; fi
            printf "%s\n" "$diffs"
      # Skip the following steps if there is no difference.
      - run-dctest-bootstrap:
          tag: release
      - run:
          name: Run dctest functions release
          command: |
            if [ -f .skip ]; then exit 0; fi
            ./bin/run-dctest-suite.sh functions release
          no_output_timeout: 20m
      - run:
          name: Delete instance
          command: |
            if [ -f .skip ]; then exit 0; fi
            . ./bin/env
            $GCLOUD compute instances delete ${INSTANCE_NAME} --zone ${ZONE}

  dctest-upgrade-release:
    docker:
      - image: google/cloud-sdk
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Configure GIT
          command: |
            git config --global user.email "neco@cybozu.com"
            git config --global user.name "cybozu-neco"
      # For testing on equal terms with "dctest-functions-release", check out in the same way as it.
      - run: git checkout release
      - run: git merge --no-commit origin/master
      - run: cp /tmp/workspace/artifacts_release.go .
      - run-dctest-bootstrap:
          tag: release
          datacenter: staging
      - run:
          name: Run dctest upgrade release
          command: ./bin/run-dctest-suite.sh upgrade release
          no_output_timeout: 20m
      - run:
          name: Delete instance
          command: |
            . ./bin/env
            $GCLOUD compute instances delete ${INSTANCE_NAME} --zone ${ZONE}

  update-release:
    docker:
      - image: quay.io/cybozu/golang:1.13-bionic
    steps:
      - add_ssh_keys:
          fingerprints:
            - "d7:2a:c8:5d:c4:32:7e:20:6f:bc:20:7c:ab:c4:24:88"
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Configure GIT
          command: |
            git config --global user.email "neco@cybozu.com"
            git config --global user.name "cybozu-neco"
      # Check difference between [`release` branch] and [`master` branch + `artifacts_release.go`]
      - run: git checkout release
      - run: git merge --no-commit origin/master
      - run: cp /tmp/workspace/artifacts_release.go .
      - run:
          name: Check diff
          command: |
            diffs=$(git status -s)
            if [ "$diffs" = "" ]; then touch .skip; exit 0; fi
            printf "%s\n" "$diffs"
      # Skip the following steps if there is no difference.
      - run:
          name: Store github-token
          command: |
            if [ -f .skip ]; then exit 0; fi
            echo "$NECO_GITHUB_TOKEN" > github-token
      - run:
          name: Commit and push to GitHub
          command: |
            if [ -f .skip ]; then exit 0; fi
            ./bin/commit-push.sh

  build_necogcp:
    docker:
      - image: quay.io/cybozu/golang:1.13-bionic
    working_directory: /work
    steps:
      - checkout
      - run: time make SUDO="" setup
      - run: time make necogcp
      - persist_to_workspace:
          root: /go/bin
          paths:
            - necogcp

  update-vmx-enabled-image:
    docker:
      - image: google/cloud-sdk
    steps:
      - checkout
      - run:
          name: Store service account
          command: |
            echo $GCLOUD_SERVICE_ACCOUNT > account.json
            gcloud auth activate-service-account --key-file=account.json
      - attach_workspace:
          at: /tmp/workspace
      - run:
          command: |
            /tmp/workspace/necogcp neco-test create-image
          no_output_timeout: 20m

workflows:
  version: 2
  # Main workflow for feature branch.
  main:
    jobs:
      - build
      - dctest-functions:
          filters:
            branches:
              ignore:
                - release
                - master
      - dctest-upgrade:
          filters:
            branches:
              ignore:
                - release
                - master

  # Update github release page.
  release:
    jobs:
      - build_release:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^release-.*/
      - deploy_github:
          requires:
            - build_release
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^release-.*/

  # Testing `master` branch and update "release" branch.
  master:
    jobs:
      - generate-artifacts:
          filters:
            branches:
              only:
                - master
      - dctest-functions-release:
          requires:
            - generate-artifacts
      - dctest-upgrade-release:
          requires:
            - generate-artifacts
      - update-release:
          requires:
            - dctest-functions-release
            - dctest-upgrade-release

  # For updating `artifact_release.go` regularly, run the same job as `master` workflow.
  daily:
    triggers:
      - schedule:
          cron: "0 15 * * 1-5"
          filters:
            branches:
              only:
                - master
    jobs:
      - generate-artifacts
      - dctest-functions-release:
          requires:
            - generate-artifacts
      - dctest-upgrade-release:
          requires:
            - generate-artifacts
      - update-release:
          requires:
            - dctest-functions-release
            - dctest-upgrade-release

  # For updating ubuntu image.
  weekly:
    triggers:
      - schedule:
          cron: "0 15 * * 0"
          filters:
            branches:
              only:
                - master
    jobs:
      - build_necogcp
      - update-vmx-enabled-image:
          requires:
            - build_necogcp
