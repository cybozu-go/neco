version: 2.1
commands:
  run-dctest-bootstrap:
    description: "run datacenter test (bootstrap)"
    parameters:
      tag:
        type: string
        default: ""
      datacenter:
        type: string
        default: ""
    steps:
      - run:
          name: Store Service Account
          command: |
            if [ -f .skip ]; then exit 0; fi
            echo $GCLOUD_SERVICE_ACCOUNT > account.json
            gcloud auth activate-service-account --key-file=account.json
      - run:
          name: Store github-token
          command: |
            if [ -f .skip ]; then exit 0; fi
            echo "$NECO_GITHUB_TOKEN" > github-token
      - run:
          name: Watch console on boot-0
          command: |
            if [ -f .skip ]; then exit 0; fi
            ./bin/watch_boot0
          background: true
      - run:
          name: Watch neco-updater logs
          command: |
            if [ -f .skip ]; then exit 0; fi
            ./bin/watch_service neco-updater
          background: true
      - run:
          name: Watch neco-worker logs
          command: |
            if [ -f .skip ]; then exit 0; fi
            ./bin/watch_service neco-worker
          background: true
      - run:
          name: Watch ep-agent logs
          command: |
            if [ -f .skip ]; then exit 0; fi
            ./bin/watch_service ep-agent
          background: true
      - run:
          name: Watch all pod logs
          command: |
            if [ -f .skip ]; then exit 0; fi
            ./bin/watch_podlogs
          background: true
      - run:
          name: Run dctest bootstrap
          command: |
            if [ -f .skip ]; then exit 0; fi
            ./bin/run-dctest.sh bootstrap "<<parameters.tag>>" "<<parameters.datacenter>>"
          no_output_timeout: 20m

  setup-tools:
    description: "setup tools"
    steps:
      # CircleCI has not yet supported to use environment variables in cache keys, so we need to use a workaround.
      # https://support.circleci.com/hc/en-us/articles/115015426888-Clear-project-dependency-cache
      - run: echo $CACHE_VERSION > CACHE_VERSION
      - restore_cache:
          key: setup-tools-{{ checksum "CACHE_VERSION" }}-{{ checksum "Makefile" }}-{{ checksum "Makefile.tools" }}-{{ checksum "Makefile.common" }}
      - run:
          name: setup tools
          command: |
            if [ -f download.tgz ]; then tar -x -f download.tgz -z; fi
            time make setup-tools
      - run:
          name: make archive if needed
          command: |
            if [ -f download.tgz ]; then exit 0; fi
            tar -c -f download.tgz -z download
      - save_cache:
          key: setup-tools-{{ checksum "CACHE_VERSION" }}-{{ checksum "Makefile" }}-{{ checksum "Makefile.tools" }}-{{ checksum "Makefile.common" }}
          paths:
            - download.tgz

  restore-tools:
    description: "only restore tools"
    steps:
      - run: if [ -f .skip ]; then circleci-agent step halt; fi
      - run: echo $CACHE_VERSION > CACHE_VERSION
      - restore_cache:
          key: setup-tools-{{ checksum "CACHE_VERSION" }}-{{ checksum "Makefile" }}-{{ checksum "Makefile.tools" }}-{{ checksum "Makefile.common" }}

  notify-slack-to-extend:
    description: "notify slack to extend the lifetime of the GCP instance"
    steps:
      - run:
          name: Notify Slack to extend the lifetime of the GCP instance
          command: |
            . ./bin/env
            curl -X POST -H 'Content-type: application/json' --data "{
              \"blocks\": [
                {
                  \"type\": \"section\",
                  \"text\": {
                    \"type\": \"mrkdwn\",
                    \"text\": \"Failed: ${CIRCLE_USERNAME}'s workflow (${CIRCLE_JOB}) in <https://circleci.com/gh/${CIRCLE_PROJECT_USERNAME}/workflows/${CIRCLE_PROJECT_REPONAME}|${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}> (<https://circleci.com/gh/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/tree/${CIRCLE_BRANCH}|${CIRCLE_BRANCH}>)\n Do you extend the lifetime of ${INSTANCE_NAME}?\"
                  },
                  \"accessory\": {
                    \"type\": \"button\",
                    \"text\": {
                      \"type\": \"plain_text\",
                      \"text\": \"Extend\",
                      \"emoji\": true
                    },
                    \"value\": \"${INSTANCE_NAME}\"
                  }
                }
              ]
            }" $SLACK_WEBHOOK_URL
          when: on_fail

jobs:
  build:
    docker:
      - image: quay.io/cybozu/golang:1.20-jammy
      - image: quay.io/coreos/etcd:v3.5.9
    working_directory: /work
    resource_class: xlarge
    steps:
      - checkout
      - run: time make SUDO="" setup
      - run: time make check-generate
      - run: time make test
      - setup-tools
      - run: time make deb SUDO="" FAKEROOT=
      - run: time make tools SUDO="" FAKEROOT=
      - run:
          command: |
            if [ "${CIRCLE_BRANCH}" != "main" ]; then
              go install ./pkg/generate-artifacts/
              generate-artifacts > /tmp/artifacts.go
              diff -u artifacts.go /tmp/artifacts.go
            fi

  build_release:
    docker:
      - image: quay.io/cybozu/golang:1.20-jammy
      - image: quay.io/coreos/etcd:v3.5.9
    working_directory: /work
    resource_class: xlarge
    steps:
      - checkout
      - run: time make SUDO="" setup
      - run: time make test
      - setup-tools
      - run:
          name: Build deb package
          command: |
            VERSION=$(echo $CIRCLE_TAG | sed 's/^[^-]*-//')
            time make deb SUDO="" DEBBUILD_FLAGS="-Zxz" VERSION="$VERSION" TAGS=release FAKEROOT=
      - run:
          name: Build neco-operation-cli packages
          command: |
            VERSION=$(echo $CIRCLE_TAG | sed 's/^[^-]*-//')
            time make tools SUDO="" DEBBUILD_FLAGS="-Zxz" VERSION="$VERSION" TAGS=release FAKEROOT=
      - persist_to_workspace:
          root: .
          paths:
            - "*.deb"
            - "*.zip"

  deploy_github:
    docker:
      - image: quay.io/cybozu/golang:1.20-jammy
    steps:
      - attach_workspace:
          at: ./artifacts
      - run: ghr -prerelease -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} ${CIRCLE_TAG} ./artifacts/

  dctest-functions:
    docker:
      - image: google/cloud-sdk
    working_directory: /work
    resource_class: xlarge
    steps:
      - checkout
      - restore-tools
      - run-dctest-bootstrap
      - run:
          name: Run dctest functions
          command: ./bin/run-dctest-suite.sh functions
          no_output_timeout: 20m
      - run:
          name: Set the instance lifetime and the state label
          command: |
            . ./bin/env
            $GCLOUD compute instances add-metadata ${INSTANCE_NAME} --zone ${ZONE} \
              --metadata shutdown-at=$(date -Iseconds -d+30minutes)
            $GCLOUD compute instances add-labels ${INSTANCE_NAME} --zone ${ZONE} \
              --labels state=failed
          when: on_fail
      - notify-slack-to-extend
      - run:
          name: Delete instance
          command: |
            . ./bin/env
            $GCLOUD compute instances delete ${INSTANCE_NAME} --zone ${ZONE}

  dctest-reboot-worker:
    docker:
      - image: google/cloud-sdk
    working_directory: /work
    resource_class: xlarge
    steps:
      - checkout
      - restore-tools
      - run-dctest-bootstrap
      - run:
          name: Run dctest reboot-worker
          command: ./bin/run-dctest-suite.sh reboot-worker
          no_output_timeout: 51m
      - run:
          name: Set the instance lifetime and the state label
          command: |
            . ./bin/env
            $GCLOUD compute instances add-metadata ${INSTANCE_NAME} --zone ${ZONE} \
              --metadata shutdown-at=$(date -Iseconds -d+30minutes)
            $GCLOUD compute instances add-labels ${INSTANCE_NAME} --zone ${ZONE} \
              --labels state=failed
          when: on_fail
      - notify-slack-to-extend
      - run:
          name: Delete instance
          command: |
            . ./bin/env
            $GCLOUD compute instances delete ${INSTANCE_NAME} --zone ${ZONE}

  dctest-upgrade:
    docker:
      - image: google/cloud-sdk
    working_directory: /work
    steps:
      - checkout
      - restore-tools
      - run-dctest-bootstrap:
          tag: release
          datacenter: staging
      - run:
          name: Run dctest upgrade
          command: ./bin/run-dctest-suite.sh upgrade
          no_output_timeout: 20m
      - run:
          name: Set the instance lifetime
          command: |
            . ./bin/env
            $GCLOUD compute instances add-metadata ${INSTANCE_NAME} --zone ${ZONE} \
              --metadata shutdown-at=$(date -Iseconds -d+30minutes)
          when: on_fail
      - notify-slack-to-extend
      - run:
          name: Delete instance
          command: |
            . ./bin/env
            $GCLOUD compute instances delete ${INSTANCE_NAME} --zone ${ZONE}

  generate-artifacts:
    docker:
      - image: quay.io/cybozu/golang:1.20-jammy
    steps:
      - checkout
      - run: go install ./pkg/generate-artifacts/
      - run: generate-artifacts --release > artifacts_release.go
      - persist_to_workspace:
          root: .
          paths:
            - "artifacts_release.go"

  dctest-functions-release:
    docker:
      - image: google/cloud-sdk
    working_directory: /work
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Configure GIT
          command: |
            git config --global user.email "neco@cybozu.com"
            git config --global user.name "cybozu-neco"
      # Check difference between [`release` branch] and [`main` branch + `artifacts_release.go`]
      - run: git checkout release
      - run: git merge --no-commit origin/main
      - run: cp /tmp/workspace/artifacts_release.go .
      - run:
          name: Check diff
          command: |
            diffs=$(git status -s)
            if [ "$diffs" = "" ]; then touch .skip; exit 0; fi
            printf "%s\n" "$diffs"
      # Skip the following steps if there is no difference.
      - restore-tools
      - run-dctest-bootstrap:
          tag: release
      - run:
          name: Run dctest functions release
          command: |
            if [ -f .skip ]; then exit 0; fi
            ./bin/run-dctest-suite.sh functions release
          no_output_timeout: 20m
      - run:
          name: Set the instance lifetime
          command: |
            . ./bin/env
            $GCLOUD compute instances add-metadata ${INSTANCE_NAME} --zone ${ZONE} \
              --metadata shutdown-at=$(date -Iseconds -d+30minutes)
          when: on_fail
      - notify-slack-to-extend
      - run:
          name: Delete instance
          command: |
            if [ -f .skip ]; then exit 0; fi
            . ./bin/env
            $GCLOUD compute instances delete ${INSTANCE_NAME} --zone ${ZONE}

  dctest-upgrade-release:
    docker:
      - image: google/cloud-sdk
    working_directory: /work
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Configure GIT
          command: |
            git config --global user.email "neco@cybozu.com"
            git config --global user.name "cybozu-neco"
      # For testing on equal terms with "dctest-functions-release", check out in the same way as it.
      - run: git checkout release
      - run: git merge --no-commit origin/main
      - run: cp /tmp/workspace/artifacts_release.go .
      - restore-tools
      - run-dctest-bootstrap:
          tag: release
          datacenter: staging
      - run:
          name: Run dctest upgrade release
          command: ./bin/run-dctest-suite.sh upgrade release
          no_output_timeout: 20m
      - run:
          name: Set the instance lifetime
          command: |
            . ./bin/env
            $GCLOUD compute instances add-metadata ${INSTANCE_NAME} --zone ${ZONE} \
              --metadata shutdown-at=$(date -Iseconds -d+30minutes)
          when: on_fail
      - notify-slack-to-extend
      - run:
          name: Delete instance
          command: |
            . ./bin/env
            $GCLOUD compute instances delete ${INSTANCE_NAME} --zone ${ZONE}

  update-release:
    docker:
      - image: quay.io/cybozu/golang:1.20-jammy
    steps:
      - add_ssh_keys:
          fingerprints:
            - "1d:a7:0e:6e:a6:aa:9c:5e:d7:be:e1:59:3f:ed:68:f3"
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Configure GIT
          command: |
            git config --global user.email "neco@cybozu.com"
            git config --global user.name "cybozu-neco"
      # Check difference between [`release` branch] and [`main` branch + `artifacts_release.go`]
      - run: git checkout release
      - run: git merge --no-commit origin/main
      - run: cp /tmp/workspace/artifacts_release.go .
      - run:
          name: Check diff
          command: |
            diffs=$(git status -s)
            if [ "$diffs" = "" ]; then touch .skip; exit 0; fi
            printf "%s\n" "$diffs"
      # Skip the following steps if there is no difference.
      - run:
          name: Commit and push to GitHub
          command: |
            if [ -f .skip ]; then exit 0; fi
            ./bin/commit-push.sh

workflows:
  version: 2
  # Main workflow for feature branch.
  main:
    jobs:
      - build
      - dctest-functions:
          filters:
            branches:
              ignore:
                - release
                - main
      - dctest-upgrade:
          filters:
            branches:
              ignore:
                - release
                - main

  manual-reboot:
    jobs:
      - hold:
          type: approval
          filters:
            branches:
              ignore:
                - release
                - main
      - dctest-reboot-worker:
          requires:
            - hold

  # Update github release page.
  release:
    jobs:
      - build_release:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^(release|test)-.*/
      - deploy_github:
          requires:
            - build_release
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^(release|test)-.*/

  # Testing `main` branch and update "release" branch.
  update-release:
    jobs:
      - generate-artifacts:
          filters:
            branches:
              only:
                - main
      - dctest-functions-release:
          requires:
            - generate-artifacts
      - dctest-upgrade-release:
          requires:
            - generate-artifacts
      - update-release:
          requires:
            - dctest-functions-release
            - dctest-upgrade-release

  # For updating `artifact_release.go` regularly, run the same job as `main` workflow.
  daily:
    triggers:
      - schedule:
          cron: "0 15 * * 1-5"
          filters:
            branches:
              only:
                - main
    jobs:
      - generate-artifacts
      - dctest-functions-release:
          requires:
            - generate-artifacts
      - dctest-upgrade-release:
          requires:
            - generate-artifacts
      - dctest-reboot-worker:
          requires:
            - generate-artifacts
      - update-release:
          requires:
            - dctest-functions-release
            - dctest-upgrade-release
